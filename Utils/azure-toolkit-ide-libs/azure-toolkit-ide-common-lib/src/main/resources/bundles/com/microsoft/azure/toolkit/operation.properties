#########################Below properties came from azure-toolkit-libs##########################
common|service.refresh=refresh Azure Module({0})
common|resource.refresh=refresh Azure Resource({0})

group.create_if_not_exist=check resource group ({0})

mysql|server.create=create MySQL server({0})
mysql|server.start=start MySQL server({0})
mysql|server.stop=stop MySQL server({0})
mysql|server.restart=restart MySQL server({0})
mysql|server.delete=delete MySQL server({0})

postgre|server.create=create Postgre server({0})
postgre|server.restart=restart Postgre server({0})
postgre|server.delete=delete Postgre server({0})
postgre.list.subscription=list PostgreSQL servers of subscription({0})
postgre.get.name|rg|sid=get PostgreSQL server({0}) in resource group({1})
postgre|server.open_by_database_tools=open PostgreSQL Server({0}) by Database Tools plugin

sqlserver|server.create=create SQL server({0})
sqlserver|server.delete=delete SQL server({0})

storage|account.create=creating storage account({0})
storage|account.delete=delete storage account({0})

redis.create=create redis cache({0})
redis.delete=delete redis cache({0})
redis.list.subscription|selected=list Redis Caches of selected subscriptions
redis.check_name=check name availability for redis cahe({0})
redis.get.id=get Redis cache({0})
redis.get_jedis_pool=get redis client pool

springcloud|cluster.load=load Spring Cloud Service({0}) from Azure
springcloud|cluster.get.name=get Spring Cloud Service({0}) by name
springcloud|cluster.refresh=refresh status of Spring Cloud Service({0}) from Azure
springcloud|cluster.list.subscription=list Spring Cloud services of subscription({0})
springcloud|cluster.list.subscription|selected=list Spring Cloud services of selected subscriptions
springcloud|app.refresh=refresh status of Spring Cloud app deployment({0}) from Azure
springcloud|app.get.name=get Spring Cloud app({0}) from Azure
springcloud|app.list.cluster=list Spring Cloud apps of Spring Cloud Service({0})
springcloud|app.load=load Spring Cloud app({0}) from Azure
springcloud|app.create=create Spring Cloud app({0})
springcloud|app.update=update Spring Cloud app({0})
springcloud|app.upload_artifact=upload artifact({0}) to Spring Cloud app({1})
springcloud|app.start=start Spring Cloud app({0})
springcloud|app.stop=stop Spring Cloud app({0})
springcloud|app.restart=restart Spring Cloud app({0})
springcloud|app.remove=remove Spring Cloud app({0})
springcloud|app.create_update_mojo=create or update Spring Cloud app from config in Mojo
springcloud|app.create_update=create or update Spring Cloud app({0}) from config
springcloud|deployment.load=load deployment({0}) of Spring Cloud app({1}) from Azure
springcloud|deployment.start=start deployment({0}) of Spring Cloud app({1})
springcloud|deployment.stop=stop deployment({0}) of Spring Cloud app({1})
springcloud|deployment.restart=restart deployment({0}) of Spring Cloud app({1})
springcloud|deployment.scale=scale deployment({0}) of Spring Cloud app({1})
springcloud|deployment.update=update deployment({0}) of Spring Cloud app({1})
springcloud|deployment.create=create deployment({0}) of Spring Cloud app({1})
springcloud|deployment.get=get deployment({0}) of Spring Cloud app({1}) from Azure
springcloud|deployment.list.app=list deployments of Spring Cloud app({0})
springcloud|deployment.wait_until_ready=wait deployment({0}) of Spring Cloud app({1}) to be ready
springcloud.get_client.subscription=get Spring Cloud rest client of subscription({0})

appservice|file.upload=upload file to path({0}) of Azure App Service app({1})
appservice|file.get.path=get file with path({0}) of Azure App Service app({1})
appservice|file.get_content=load content of file({0}) of Azure App Service app({1})
appservice|file.list.dir=list files in directory({0}) of Azure App Service app({1})
appservice|plan.get.id=get Azure App Service plan by id({0})
appservice|plan.get.name|rg|sid=get Azure App Service plan({0}) in resource group({1})
appservice|plan.list.subscription|selected=list Azure App Service plans of selected subscriptions
appservice|plan.list.subscription=list Azure App Service plans of subscription({0})
appservice|plan.list.rg=list Azure App Service plans of resource group({0})
appservice|deployment.get.id=get Azure App Service deployment slot by id({0})
appservice|deployment.get.name|app|rg|subscription=get Azure App Service deployment slot({0}) of app({1})
appservice.get_client.subscription=get Azure App Service rest client of subscription({0})
appservice|plan.create_update=create or update Azure App Service plan ({0}) from config
appservice.check_name=check name availability for ({0})

functionapp.get.id=get Azure Functions app({0})
functionapp.get.name|rg|sid=get Azure Functions app({0}) in resource group{(1)}
functionapp.list.subscription|selected=list Azure Functions apps of selected subscriptions
functionapp.list.subscription=list Azure Functions apps of subscription({0})
functionapp|mojo.deploy=deploy to Azure Function App with resource creation or updating

webapp.create_update=create or update Azure Web App ({0}) from config
webapp.deploy=deploy artifacts to Azure Web App ({0})
webapp.get.id=get Azure Web App({0})
webapp.get.name|rg|sid=get Azure Web App({0}) in resource group({1})
webapp.list.subscription|selected=list Azure Web Apps of selected subscriptions
webapp.list.subscription=list Azure Web Apps of subscription({0})
webapp|runtime.list.os|version=list available Azure Web App runtimes with os({0}) and java version({1})
webapp|mojo.deploy=deploy to Azure Web App with resource creation or updating
webapp.create=create Azure Web App ({0}) from config
webapp.update=update Azure Web App ({0}) from config
#########################Above properties came from azure-toolkit-libs##########################

account.sign_in=sign in to Azure
account.sign_out=sign out from Azure
account|auth_setting.load=load auth settings from file system
account|auth_setting.persist=persist auth settings to file system
account|auth_setting.update=update auth settings
account|subscription.clear_cache=clear persistent subscriptions cache from file system
account|subscription.flush_cache=flush subscriptions cache
account|subscription.get_detail.selected=load details of all selected subscriptions
account|subscription.get_detail=load details of subscription({0})
account|subscription.get_details=get details of all cached subscriptions
account|subscription.get_tenant=get tenant id of subscription({0})
account|subscription.list.selected=list selected subscriptions
account|subscription.list.tenant|authorized=load subscriptions from authorized tenants
account|subscription.list.tenant=get all subscriptions of tenant({0})
account|subscription.load_all=load all available subscriptions from Azure
account|subscription.load_cache=reload subscriptions cache from file system
account|subscription.persist=persist subscriptions cache to file system
account|subscription.refresh=reload subscriptions
account|subscription.select=select one/more subscriptions to work on
account|tenant.auth=authenticate tenant({0})
account|tenant.list.authorized=get all authorized tenants
account.authorize=authorizing...

action|common.open_browser=open browser with url({0})

ai.create.rg=create application insight({0}) in resource group({1})
ai.list.subscription=list application insights of subscription({0})

appservice.toggle_mode.ui=toggle simple/advanced mode of App Service configuration dialog
appservice|file.check_existence=check the existence of file({0})
appservice|file.download=download file({0}) to local
appservice|file.list=reload log/files of web/function app({0})
appservice|file.open_editor=open and focus the editor of file({0})
appservice|file.open=open file({0}) in editor
appservice|file.refresh=refresh file({0})
appservice|file.save=save file({0}) to azure
appservice|file.write_editor=load file content into editor
appservice|flight_recorder.list.app=list flight recorders of app({0})
appservice|flight_recorder.profile=profile flight recorder
appservice|log_stream.close=close streaming log of app({0})
appservice|log_stream.open=open streaming log of app({0})
appservice|log_stream.start=start streaming log of app({0})
appservice|plan.list.subscription|region|os=load app service plans of subscription({0})/region({1})/os({2})
appservice|plan.list.subscription|rg=get all service plans in resource group({0}) of subscription({1})
appservice|region.list.subscription|tier=get available regions with pricing tier({0}) of subscription({1})

arm|deployment.delete=delete azure resource(deployment:{0})
arm|deployment.deploy=deploy azure resource(deployment:{0})
arm|deployment.list.subscription|rg=list all deployments of resource group({0}) in subscription({1})
arm|deployment.list.subscription|selected=list all deployments of selected subscriptions
arm|deployment.list.subscription=list all deployments of subscription({0})
arm|deployment.update=update azure resource(deployment:{0})
arm|rg.delete=delete resource group({0})
arm|rg.get.subscription=load details of resource group({0}) in subscription({1})
arm|rg.list.subscription|selected=list resource groups of selected subscription
arm|rg.list.subscription=list resource groups of subscription({0})
arm|rg.open_portal=open configuration page of resource group({0}) in portal

blob.create=create blob container({0})
blob.delete=delete blob({0})
blob.download=download blob into file({0}) from container({1})
blob.list=load blobs of container({0})
blob.upload=upload blob file({0}) to blob container({1})

common.list_regions=list all available locations
common.list_tiers=list all available pricing tiers
common.load_whatsnew=load what's new document
common.open_portal=open setting page of resource({0}) in portal
common.show_properties=show properties of deployment({0})
common.validate_project=check if project({0}) is a valid function project
common|artifact.get_file=get target file of artifact({0})
common|artifact.get_id=get identifier of artifact({0})
common|artifact.get_module=get module from artifact({0})
common|artifact.list.project=list supported artifacts of project({0})
common|artifact.zip_files=archive artifacts into ({0}) for deployment
common|combobox.load_items=load/refresh {0} items in combo box
common|explorer.initialize=initialize Azure explorer
common|explorer.open=open Azure explorer
common|explorer.refresh=refresh Azure explorer
common|node.load_content=load content of node({0})
common|region.list.subscription|tier=get available regions with pricing tier({0}) of subscription({1})
common|region.list.subscription=load available regions of subscription({0})
common|resource.connect=connect to resource ({0})
common|resource.create=create app under ({0})
common|resource.delete=delete ({0})
common|resource.deploy=deploy artifacts to ({0})
common|resource.open_portal_url=open ({0}) in Azure Portal
common|resource.restart=restart ({0})
common|resource.show_properties=show properties view of ({0})
common|resource.start=start ({0})
common|resource.stop=stop ({0})
common|rest_client.create_asc=create rest client for Azure Spring Cloud services in subscription({0})
common|rest_client.create_mysql=create rest client for Azure MySQL services in subscription({0})
common|rest_client.create=create rest client for general Azure services in subscription({0})

connector|aad.choose_subscription=choose Azure AD subscription
connector|aad.create_aad_application=creating Azure AD application
connector|aad.register_application=show ui to register a new Azure AD application
connector|aad.show_aad_template=show code templates for newly create Azure AD application
connector|aad.show_application_templates=show code templates for Azure AD applications
connector|explorer.add_connection=add new Azure resource connector
connector|explorer.edit_connection=edit Azure resource connector
connector|explorer.initialize=initialize Azure Resource Connector tool window
connector|explorer.refresh_connection=refresh to reload nodes of Azure Resource Connector explorer
connector|explorer.remove_connection=remove Azure resource connector
connector|explorer.show_resource_properties=show properties of the resource of Azure Resource Connector
connector|mysql.prepare_before_run=prepare before run configuration in Azure Resource Connector for MySQL

container.open_portal=open registered container({0}) in portal
container.show_properties=show properties of registered container({0})

docker.add_docker_support.configuration=add docker support within run/debug configuration
docker.create_from_private_image=create web app({0}) in subscription({1}) with private registry image({2})
docker.deploy_image.state=deploy docker image to web app
docker.ping=try connecting docker({0})
docker.start.configuration=start docker based web app within run/debug configuration
docker|image.build=build docker image({0}) in directory({1}) on docker host({2})
docker|image.pull=pull docker image({0})
docker|image.push.configuration=push docker image to web app within run/debug configuration
docker|image.push=push docker image({0}) to registry({1})
docker|image.update=update docker image of web app({0}) to ({1})

function.clean_staging_folder=clean up staging folder({0})
function.complete_deployment=complete the deployment of function({0}) and refresh Azure Explorer
function.complete_local_run=complete running function({0})
function.copy_settings=copy local settings({0}) to staging folder({1})
function.create_detail=create function app ({0})...
function.create=create function app
function.delete=delete function app({0})
function.deploy.configuration=deploy function app within run/debug configuration
function.deploy.state=deploy function app
function.deploy_artifact=deploy artifacts to function
function.get.rg=get function app({0}) in resource group({1})
function.get_publishing_profile=get publishing profile of function app({0}) with secret
function.get_tiers=get all available pricing tiers for function apps
function.get_version=get version of function({0})
function.get=get detail info of function app({0})
function.import_app_settings=import app settings
function.launch_debugger=launch debugger for function
function.list.detail|java|subscription|selected=list all java function apps with details in selected subscription(s)
function.list.java|subscription|selected=list all java runtime function apps in selected subscription(s)
function.list.subscription|selected=list all function apps in selected subscription(s)
function.list.subscription=list all function apps in subscription({0})
function.list_function_methods=list all function methods in module({0}) by annotation
function.list_function_modules=list all function modules in project({0})
function.load_setting=load app settings of function app({0})
function.open_creation_dialog=open function app creation dialog
function.open_portal=open function({0}) in portal
function.prepare_staging_folder_detail=prepare staging folder({0}) for function({1})
function.prepare_staging_folder=prepare staging folder for function method
function.refresh=refresh functions in function app
function.reload_all=reload function apps
function.restart=restart function app({0})
function.run.configuration=run function app locally within run/debug configuration
function.run.state=run function app locally
function.show_properties=show properties of function({0})
function.start=start function app({0})
function.stop=stop function app({0})
function.turn_on_logs=turn on application log for function app({0})
function.update_setting=update settings of function app({0})
function.validate_jre=validate version of local jre
function.validate_runtime=validate runtime of function({0})
function|ai.create=create application insights for function({0})
function|cli.run=run function CLI command from staging folder({0})
function|envelops.list=get all envelops of function app({0})
function|trigger.list_urls=list http trigger urls
function|trigger.list=sync and list triggers of function({0})
function|trigger.start.detail=trigger function({0})
function|trigger.start_event=start event hub trigger for function({0})
function|trigger.start_http=start http trigger for function({0})
function|trigger.start_timer=start timer trigger for function({0})
function|trigger.start=trigger function app

mysql.connect_server=connect to Azure MySQL server({0})
mysql.open_portal=open configuration page of MySQL server({0}) in portal
mysql.show_properties=show properties of MySQL server({0})
mysql.update_password=update password of MySQL instance
mysql|database.list.server=list all Azure MySQL database schemas in server({0})
mysql|region.list.supported=list Azure MySQL-supported regions
mysql|server.create.task=create Azure Database for MySQL({0}) in subscription({1})
mysql|version.list.supported=list Azure MySQL-supported versions

postgre.connect_server=connect to Azure PostgreSQL server({0})
postgre.open_portal=open configuration page of PostgreSQL server({0}) in portal
postgre.show_properties=show properties of PostgreSQL server({0})
postgre.update_password=update password of PostgreSQL instance
postgre|database.list.server=list all Azure PostgreSQL database schemas in server({0})
postgre|region.list.supported=list Azure PostgreSQL-supported regions
postgre|server.create.task=create Azure Database for PostgreSQL({0}) in subscription({1})
postgre|version.list.supported=list Azure PostgreSQL-supported versions

redis.open_explorer=open redis explorer of redis instance({0})
redis.open_portal=open configuration page of redis instance({0}) in portal
redis.show_properties=show properties of redis instance({0})

sdk.load_meta_data.java=load Azure SDK meta data
sdk.load_meta_data.spring=load Azure SpringBoot SDK meta data
sdk.load_meta_data.whitelist=load Azure SDK allow list meta data
sdk.load_meta_data=load Azure SDK meta data from github
sdk|deprecated_libs.warn=warn on deprecated libs
sdk|reference_book.open=open Azure SDK Reference Book
sdk|reference_book.show_details=show details of feature({0}) in Azure SDK list

springcloud.deploy=deploy spring cloud application
springcloud.update_dependency=update Azure Spring Cloud dependencies for project({0})
springcloud|app.delete=delete spring cloud app({0})
springcloud|app.open_browser=access public endpoint of spring cloud app({0})
springcloud|app.open_portal=open configuration page of spring cloud app({0}) in portal
springcloud|app.open_public_url=open public endpoint of Azure Spring Cloud app({0}) in browser
springcloud|app.open_test_url=open test endpoint of Azure Spring Cloud app({0}) in browser
springcloud|app.show_properties=show properties of spring cloud app({0})
springcloud|app.stream_log=open log streaming of Azure Spring Cloud app({0})
springcloud|log_stream.close=close stream log for Spring Cloud app/instance({0})
springcloud|log_stream.open=open stream log for Spring Cloud app/instance({0})
springcloud|log_stream.start=start stream log for Spring Cloud app/instance({0})

sqlserver|server.database_load|subscription=list all SQL Server databases in server({0}) of subscription({1})
sqlserver|server.open_by_database_tools=open SQL Server({0}) by Database Tools plugin.
sqlserver|server.open_portal=open configuration page of SQL Server({0}) in portal
sqlserver|server.show_properties=show properties of SQL Server({0})

storage|account.open_portal=open configuration page of storage account({0}) in portal
storage|account.open_storage_browser=open storage browser of storage account({0}) in portal
storage|account.open_storage_explorer=open Storage Explorer of storage account({0})

vm.create=create virtual machine({0})
vm.delete=delete virtual machine({0})
vm.list_availability_sets=list all available availability sets
vm.list_public_ips=load all available public ip addresses
vm.list_security_groups=list all available network security groups
vm.list_sizes.region=list all VM sizes in region({0})
vm.list_storage_accounts=list all available storage accounts
vm.list_virtual_networks=load all available virtual networks
vm.open_portal=open configuration page of virtual machine({0}) in portal
vm.restart=restart virtual machine({0})
vm.start=start virtual machine({0})
vm.stop=stop virtual machine({0})
vm|image.list=load images
vm|offer.list=load offers in publisher({0})
vm|publisher.list=load publishers
vm|sku.list=load skus in offer({0})
vm|ssh.add_config=Add SSH config for ({0})
vm|ssh.open_ssh_config_dialog=Open "SSH Configurations" Dialog

webapp.clear_cache=clear local web apps cache
webapp.complete_deployment.state=complete the deployment of web app({0}) and refresh Azure Explorer
webapp.complete_starting.state=update local configuration and open url of web app in local browser
webapp.create_detail=create web app({0})
webapp.delete_detail=delete web app({0})
webapp.delete=delete web app
webapp.deploy_artifact=deploy artifact to web app ({0})
webapp.deploy_module=deploy module({0}) as Azure web app
webapp.get_publishing_profile=get publishing profile of web app({0}) with secret
webapp.get=get detail info of web app({0}) in subscription({1})
webapp.init_config=init web app configuration
webapp.list.detail|subscription|selected=list all web apps with details in selected subscription(s)
webapp.list.java|subscription|selected=list all java web apps in selected subscription(s)
webapp.list.linux|subscription|selected=list all linux web apps in selected subscription(s)
webapp.list.linux|subscription=list all linux web apps in subscription({0})
webapp.list.windows|subscription|selected=list all windows web apps in selected subscription(s)
webapp.list.windows|subscription=list all windows web apps in subscription({0})
webapp.list_containers=list all available web containers
webapp.list_jdks=list all available JDKs
webapp.list_linux_runtime=list all available linux runtime stacks
webapp.open_browser.state=open web app in local browser
webapp.open_creation_dialog=open web app creation dialog
webapp.open_portal=open configuration page of web app({0}) in portal
webapp.refresh=refresh content of web app
webapp.reload=reload web apps in selected subscription(s)
webapp.update_settings=update settings of web app({0})
webapp|artifact.get.state=get the artifact to be deployed to web app({0})
webapp|artifact.prepare_ftp=prepare ftp connection for deployment
webapp|artifact.update=update artifact of app({0})
webapp|artifact.upload_ftp=upload file to ftp server
webapp|artifact.upload=upload artifact({0}) to app({1})
webapp|artifact.zip=archive artifact({0}) to temporary zip file for deployment
webapp|deployment.create.state=create deployment slot for web app({0})
webapp|deployment.create=create deployment({0}) for web app({1})
webapp|deployment.delete=delete deployment slot({0}) of web app({1})
webapp|deployment.get_publishing_profile=get publishing profile of deployment slot({0}) of web app({1}) with secret
webapp|deployment.list=get deployment slots of web app({0})
webapp|deployment.open_portal=open configuration page of deployment slot({0}) in portal
webapp|deployment.refresh=refresh deployment slot({0}) of web app({1})
webapp|deployment.reload=refresh deployment slots of web app({0})
webapp|deployment.restart=restart deployment slot({0}) of web app({1})
webapp|deployment.start=start deployment slot({0}) of web app({1})
webapp|deployment.stop=stop deployment slot({0}) of web app({1})
webapp|deployment.swap=swap deployment slot({0}) of web app({1}) for production
webapp|deployment.update_settings=update settings of deployment slot({0}) of web app({1})
webapp|ssh.connect=connect to web app ({0})
webapp|ssh.open=Opening SSH - ({0}) session ...
